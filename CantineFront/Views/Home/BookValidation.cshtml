@using AutoMapper;
@using CantineBack.Models
@using CantineFront.Helpers;
@using Newtonsoft.Json;
@inject IHttpContextAccessor Accessor
@{
    var paymentMethods = Accessor.HttpContext?.Session.GetListObjectFromSession<PaymentMethod>("PaymentMethods") ?? new List<PaymentMethod>();

}

@section Styles{


    <style>

        .btn-link .btn-link:hover {
            background-color: transparent;
        }

        input[type=number] {
            min-width: 50px;
        }
    </style>
}
<!-- book section -->
<section class="book_section layout_padding">
    <div class="container-fluid px-lg-5 px-sm-1">
        <div class="">
            <form action="" id="formBooking">
                <input type="hidden" id="formSeted" value="false"/>
                <div class="row d-flex justify-content-center align-items-center h-100">
                    <div class="col-12">
                        <div class="card card-registration card-registration-2" style="border-radius: 15px;min-height:500px">
                            <div class="card-body p-0">
                                <div class="row g-0">
                                    <div class="col-lg-8">
                                        <div class="p-5">
                                            <div class="d-flex justify-content-between align-items-center mb-5">
                                                <h1 class="fw-bold mb-0 text-black">Panier de commande</h1>
                                                <h6 class="mb-0 text-muted"><span id="selectedArticlesCount"></span> article(s)</h6>
                                            </div>

                                            <div id="articleLines">
                                            </div>


                                            <hr class="my-4">

                                            <div class="pt-5">
                                                <h6 class="mb-0">
                                                    <a href="/Home/Menu" class="text-body">
                                                        <i class="fa fa-arrow-left me-2"></i>Retour à la boutique
                                                    </a>
                                                </h6>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4 bg-grey">
                                        <div class="p-5">
                                            <h3 class="fw-bold mb-5 mt-2 pt-1">Résumé</h3>
                                            <hr class="my-4">
                                            <input type="hidden" name="UserId" id="userId" />
                                            <input type="hidden"   id="soldeRestant" />

                                            <div class="justify-content-between mb-5" id="clientDiv" style="display:none">
                                                <h5 class="text-uppercase">Client</h5>
                                                <h6 id="client">  </h6>
                                            </div>

                                            <div class="justify-content-between mb-5 text-warning" id="soldeDiv" style="display:none">
                                                <h5 class="text-uppercase ">Solde</h5>
                                                <h5 id="solde">  XOF</h5>
                                            </div>
                                            <span class="text-danger" id="messageSolde"></span>

                                            <div class="mb-4 pb-2 ">
                                                <label class="mb-3">Méthode de paiement</label>
                                                <select class="form-control   wide" required name="PaymentMethodId" id="PaymentMethodId">
                                                    <option selected/>
                                                    @foreach (var pm in paymentMethods)
                                                    {

                                                        <option data-code="@pm.Code" value="@pm.Id">@pm.Name</option>
                                                    }
                                                </select>
                                            </div>
                                            <hr class="my-4">
                                            <div class="d-flex justify-content-between mb-5">
                                                <h5 class="text-uppercase">Prix Total</h5>
                                                <h6 id="totalPrice">  XOF</h6>
                                            </div>

                                            <button type="button" class="btn btn-dark btn-block btn-lg" id="btnCommand" style="font-size:14px"
                                                    data-mdb-ripple-color="dark">
                                                Valider commande
                                            </button>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>





            </form>
        </div>


    </div>
</section>
<!-- end book section -->
@section Scripts {



    <script>
        const CommandeADistance = false;
        let checkSolde = false;
    


        $("#formBooking").validate({
            rules: {
                "EmplacementId": { required: false },
                "Quantite": { required: true, min: 1 },
            },
            messages: {
                "Quantite": { min: "La quantité doit être supérieure ou égale à 1." },
            },
            feedbackIcons: {
                valid: 'fa fa-check',
                invalid: 'fa fa-remove',
                validating: 'fa fa-refresh'
            },
            errorClass: "error fail-alert",
            validClass: "valid success-alert",
            errorPlacement: function (error, element) {
                var placement = $(element).data('error');
                if ($(element).attr("name") == "Quantite") {

                    error.insertAfter(element.closest("[id^='row_']"));
                }

                else if (placement) {

                    console.log(placement.classNames)
                    $(placement).append(error)
                } else {
                    error.insertAfter(element);
                }
            }
        })
        const ARTICLES_PRIX_DICT = JSON.parse('{}');
        console.log(ARTICLES_PRIX_DICT);


        function updateTotalPrice(showMessage=false) {

            var totalPrice = 0;
            for (const [id, price] of Object.entries(ARTICLES_PRIX_DICT)) {
                //   console.log(key, value);
                var $quantite = $("#quantite_" + id)
                var q = $quantite.length > 0 ? $quantite.val() : 0
                totalPrice += q * price;
                $("#prixTotal_" + id).text(q * price);
            }

            $("#totalPrice").text(`${totalPrice} XOF`);
            var solde = $("#soldeRestant").val();
            console.log(solde)
            // if (totalPrice>solde){
            //     $("#solde").removeClass("text-warning text-danger text-success").addClass("text-danger");
            //     if (showMessage) {
            //         ToastR("Le montant total est supérieur à ton solde", "error", 10, "toast-bottom-right");
            //     }

            //     $("#messageSolde").text("Solde insuffisant.");
            //     $("#btnCommand").prop("disabled",true);
            // }else{
            //     $("#btnCommand").prop("disabled", false);
            //     $("#messageSolde").text("")
            //     $("#solde").removeClass("text-warning text-danger text-success").addClass("text-success");
            // }
        }
       $(function(){
           

            $("#PaymentMethodId").on("change", function () {

                checkSolde = $(this).find("option:selected").data("code") == "QRCODE";
                console.log("checkSolde = ", checkSolde)
                if (!checkSolde) {
                    $("#btnCommand").prop("disabled", false);
                    $("#solde").removeClass("text-warning text-danger text-success").addClass("text-success");
                    $("#messageSolde").text("");
                } else {
                    updateTotalPrice();

                }
            });


            $(".deleteArticleCart").off("click").on("click", function () {
                var id = $(this).data("articleid")
                if (id > 0) {
                    var successHandler = (data) => {

                        if (data == undefined || data == null || data == "")
                            ToastR("Une erreur a été rencontrée", "error", 10);
                        else {

                            if (data.success) {
                                delete ARTICLES_PRIX_DICT[id]
                                $("#row_" + id).remove();
                                $("#line_" + id).remove();
                                $("#cartBadge").text(data.object);
                                $("#cartBadge").show();
                                $("#cartBadgeFloatClear").show();
                                $("#cartBadgeFloat").show();

                                $("#cartBadgeFloatCount").text(data.object);
                                updateTotalPrice();
                                // ToastR(data.message, "success", 10, "toast-bottom-right");
                                console.log(ARTICLES_PRIX_DICT)
                                $("#selectedArticlesCount").text(Object.keys(ARTICLES_PRIX_DICT).length)
                            }

                            else {

                                ToastR(data.message, "error", 10);

                            }

                        }

                    };
                    var errorHandler = (err) => {

                        ToastR("La suppréssion a échoué", "error", 10);
                    };

                    ajaxManager("DELETE", "/Home/DeleteArticleCart", successHandler, errorHandler, { id: id })
                }
            }
            );
            $("#btnCommand").off().on("click", function (e) {
                var btn = $(this);
                if ($("#formBooking").valid()) {
                    btn.prop("disabled", true);
                    var postData = {

                        EmplacementId: $("#EmplacementId").val(),
                        PaymentMethodId: $("#PaymentMethodId").val(),
                    }


                    var lignesCommandes = [];
                    for (const [id, price] of Object.entries(ARTICLES_PRIX_DICT)) {

                        var $quantite = $("#quantite_" + id)
                        var q = $quantite.length > 0 ? $quantite.val() : 0;
                        lignesCommandes.push({ ArticleId: id, Quantite: q, PrixTotal: q * price })

                    }
                    if (lignesCommandes.length == 0) {
                        ToastR("Aucune ligne de commande n'est trouvée", "error", 5);
                        btn.prop("disabled", false);
                        return;
                    }
                    postData["LigneCommands"] = lignesCommandes;
                    postData["CommandeADistance"] = false;
                    postData["UserId"] = $("#userId").val();
                    console.log(postData);


                    try {
                        var successHandler = (data) => {
                            console.log("res= " + JSON.stringify(data));

                            endLoadingById("body");
                            if (data == undefined || data == null || data == "")
                                ToastR("Une erreur a été rencontrée", "error", 10);
                            else {

                                if (data.success) {
                                    var userid = $("#userId").val();
                                    sendDataCommand(userid,JSON.stringify(data.object))

                                    $("#cartBadge").hide();
                                    $("#cartBadgeFloat").hide();
                                    $("#cartBadgeFloatClear").hide();
                                    $("#cartBadge").text("0");
                                    $("#cartBadgeFloatCount").text("0");

                                    ToastR(data.message, "success", 10);
                                    setTimeout(function () {
                                        // window.location = window.location.origin + "/Home/Menu";
                                        location.reload();
                                    }, 3000);
                                }

                                else {
                                    ToastR(data.message, "error", 10);
                                }

                            }

                        };
                        var errorHandler = (err) => {
                            btn.prop("disabled", false);
                            ToastR("Une erreur inattendue a été rencontrée", "error", 15);
                        }

                        ajaxManager("POST", "/Commande/CreateCommande", successHandler, errorHandler, postData);


                    } catch (e) {
                        console.log("Error : " + e);
                    }
                    finally {



                    }

                }

            });


       })
        
  
    </script>
                        }